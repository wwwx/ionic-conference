{"version":3,"sources":["pages/mine/Mine.tsx"],"names":["Conference","lazy","Invite","Mine","props","tabsConfig","label","value","view","useState","active","setActive","type","useParams","useEffect","mode","onIonChange","e","tabName","detail","map","tab","key","fallback","i"],"mappings":"+KAMMA,EAAaC,gBAAK,kBAAM,sEACxBC,EAASD,gBAAK,kBAAM,+DA8DXE,UAtDQ,SAACC,GACtB,IAAMC,EAAa,CACjB,CACEC,MAAO,2BACPC,MAAO,SACPC,KAAMN,GAER,CACEI,MAAO,2BACPC,MAAO,aACPC,KAAMR,IAVsB,EAmBJS,mBAASJ,EAAW,GAAGE,OAnBnB,mBAmBzBG,EAnByB,KAmBjBC,EAnBiB,KAyBxBC,EAASC,cAATD,KAKR,OAJAE,qBAAU,WACRH,EAAUC,KACT,CAACA,IAGF,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,KAAK,KACLR,MAAOG,EACPM,YAAa,SAACC,GAAD,OAfKC,EAewBD,EAAEE,OAAOZ,WAdzDI,EAAUO,GADa,IAACA,IAiBjBb,EAAWe,KAAI,SAACC,GAAD,OACd,kBAAC,IAAD,CAAkBC,IAAKD,EAAId,MAAOA,MAAOc,EAAId,OAC3C,kBAAC,IAAD,KAAWc,EAAIf,aAKvB,kBAAC,WAAD,CAAUiB,SAAU,+BACjBlB,EAAWe,KAAI,SAACC,EAAKG,GACpB,OAAOd,IAAWW,EAAId,MAAQ,kBAACc,EAAIb,KAAL,CAAUc,IAAKE,IAAQ","file":"static/js/59.901917cf.chunk.js","sourcesContent":["import React, { lazy, Suspense, useEffect, useState } from 'react'\nimport { IonLabel, IonSegment, IonSegmentButton, IonToolbar } from '@ionic/react'\nimport { useParams } from 'react-router'\n\nimport { MineRouteParams } from '../../service/mine.model'\n\nconst Conference = lazy(() => import('./MyConference'));\nconst Invite = lazy(() => import('./MyInvite'));\n\n/**\n * 我的会议\n *\n * @param {*} props\n * @return {*} \n */\nconst Mine: React.FC = (props) => {\n  const tabsConfig = [\n    {\n      label: '会议邀请',\n      value: 'invite',\n      view: Invite,\n    },\n    {\n      label: '我的会议',\n      value: 'conference',\n      view: Conference,\n    },\n    // {\n    //   label: '我的会议2',\n    //   value: 'conference2',\n    //   view: Invite,\n    // },\n  ];\n  // eslint-disable-next-line\n  const [active, setActive] = useState(tabsConfig[0].value);\n\n  const handleTabsChange = (tabName: string) => {\n    setActive(tabName);\n  };\n\n  const { type } = useParams<MineRouteParams>();\n  useEffect(() => {\n    setActive(type);\n  }, [type]);\n\n  return (\n    <>\n      <IonToolbar>\n        <IonSegment\n          mode=\"md\"\n          value={active}\n          onIonChange={(e: any) => handleTabsChange(e.detail.value)}\n        >\n          {tabsConfig.map((tab) => (\n            <IonSegmentButton key={tab.value} value={tab.value}>\n              <IonLabel>{tab.label}</IonLabel>\n            </IonSegmentButton>\n          ))}\n        </IonSegment>\n      </IonToolbar>\n      <Suspense fallback={<div />}>\n        {tabsConfig.map((tab, i) => {\n          return active === tab.value ? <tab.view key={i} /> : null;\n        })}\n      </Suspense>\n    </>\n  );\n};\n\nexport default Mine;\n"],"sourceRoot":""}