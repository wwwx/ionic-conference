{"version":3,"sources":["../node_modules/classnames/index.js","components/AppCard.tsx","service/enum.ts","components/Common.tsx","service/base-service.ts","utils/commonFunctions.ts","pages/mine/Card/Card.tsx","pages/mine/Card/ConferenceFinishedCard.tsx","pages/mine/Card/ConferenceHasNotStartCard.tsx","components/Staff.tsx","pages/mine/Card/ConferenceProcessingCard.tsx","pages/mine/Card/InviteCard.tsx","pages/mine/Card/RecordHasNotPublishCard.tsx","pages/mine/Card/RecordProcessingCard.tsx","pages/mine/Card/RecordPublishedCard.tsx","pages/mine/Card/index.ts","pages/mine/RecordList.tsx"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","AppCard","styled","div","ConferenceType","Role","RecordType","Loading","ErrorMessage","Empty","className","NoMore","service","axios","create","timeout","baseURL","interceptors","response","use","error","Promise","reject","Error","getRoleName","role","HOST","RECORDED","CardWrap","Card","renderHead","renderBody","renderButtons","typeName","isHost","classnames","ConferenceFinishedCard","data","onConfirm","title","datetime","address","onClick","ConferenceHasNotStartCard","onCancel","host","Staff","info","roleName","name","dept","StaffList","styld","ConferenceProcessingCard","membersWrapRef","useRef","useState","membetItemSize","setMemberItemSize","useEffect","handleResize","current","membersWrapWidth","offsetWidth","size","Math","floor","window","addEventListener","removeEventListener","content","ref","members","find","item","map","InviteCard","RecordCard","RecordProcessingCard","RecordPublishedCard","Invite","history","useHistory","publishedList","setPublishedList","useSWR","fetcher","get","list","filter","type","PUBLISHED","handConfirm","console","log","handleCancel"],"mappings":"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","file":"static/js/14.d6515b01.chunk.js","sourcesContent":["/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import styled from 'styled-components';\n\nconst AppCard = styled.div`\n  border-radius: 8px;\n  background-color: white;\n  padding: 1rem;\n  margin: 1rem;\n  position: relative;\n`;\n\nexport default AppCard;\n","export enum ConferenceType {\n  HAS_NOT_START,\n  PROCESSING,\n  FINISHED,\n}\n\nexport enum Role {\n  HOST = 'host',\n  RECORDED = 'recorder',\n}\n\nexport enum RecordType {\n  HAS_NOT_START,\n  PROCESSING,\n  PUBLISHED,\n}\n","import './Common.scss'\n\nimport React from 'react'\n\nfunction Loading() {\n  return <div>Loading...</div>;\n}\n\nfunction ErrorMessage() {\n  return <div>Oops !! something went wrong</div>;\n}\n\nfunction Empty() {\n  return (\n    <div className=\"Empty\">\n      <div className=\"empty-bg\"></div>\n      <p className=\"empty-message\">暂无数据</p>\n    </div>\n  );\n}\n\nfunction NoMore() {\n  return <div className=\"mt-4 mb-5 color-ccc font-12 text-center\">没有更多了</div>;\n}\n\nexport { Loading, ErrorMessage, Empty, NoMore };\n","import axios from 'axios'\n\nconst baseConfig = {\n  timeout: 10e3,\n  baseURL: '/',\n};\nconst service = axios.create(baseConfig);\nservice.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    return Promise.reject(new Error(error));\n  }\n);\nexport default service;\n","import Axios from 'axios'\n\nimport { Role } from '../service/enum'\n\nexport const fetcher = (url: string) => {\n  return Axios.get(url);\n};\n\n\nexport function getRoleName(role: Role) {\n  switch (role) {\n    case Role.HOST:\n      return '主持人';\n    case Role.RECORDED:\n      return '记录员';\n  }\n  return role;\n}\n","import classnames from 'classnames';\nimport React from 'react';\nimport styled from 'styled-components';\nimport AppCard from '../../../components/AppCard';\nimport './Card.scss';\nimport { CardProps } from './type';\n\nconst CardWrap = styled(AppCard)`\n  margin-top: 0.625rem;\n  margin-bottom: 0.625rem;\n`;\n\nconst Card: React.FC<CardProps> = ({ renderHead, renderBody, renderButtons, typeName, isHost }) => {\n  return (\n    <CardWrap className=\"Card\">\n      {typeName && <span className={classnames('Card__tag', isHost ? 'host' : 'participate')}>{typeName}</span>}\n\n      {renderHead && <div className=\"Card__head border-bottom\">{renderHead}</div>}\n\n      <div className=\"Card__body\">{renderBody}</div>\n      <div className=\"Card__foot border-top\">{renderButtons}</div>\n    </CardWrap>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { ICardProps } from './type';\n\nconst ConferenceFinishedCard: React.FC<ICardProps> = ({ data, typeName, onConfirm }) => {\n  return (\n    <Card\n      typeName={typeName}\n      isHost={data.isHost}\n      renderBody={\n        <ul className=\"ul\">\n          <li>\n            <label>主题</label>\n            <span className=\"_title\">{data.title}</span>\n          </li>\n          <li>\n            <label>时间</label>\n            <span className=\"emphaise\">{data.datetime}</span>\n          </li>\n          <li>\n            <label>地点</label>\n            <span>{data.address}</span>\n          </li>\n        </ul>\n      }\n      renderButtons={\n        <>\n          {onConfirm && (\n            <button className=\"Card__button confirm\" onClick={() => onConfirm()}>\n              <span>查看详情</span>\n            </button>\n          )}\n        </>\n      }\n    />\n  );\n};\n\nexport default ConferenceFinishedCard;\n","import React from 'react';\nimport Card from './Card';\nimport { ICardProps } from './type';\n\nconst ConferenceHasNotStartCard: React.FC<ICardProps> = ({ data, typeName, onConfirm, onCancel }) => {\n  return (\n    <Card\n      typeName={typeName}\n      isHost={data.isHost}\n      renderHead={<span className=\"_title\">{data.title}</span>}\n      renderBody={\n        <ul className=\"ul\">\n          <li>\n            <label>地点</label>\n            <span>{data.address}</span>\n          </li>\n          <li>\n            <label>时间</label>\n            <span className=\"emphaise\">{data.datetime}</span>\n          </li>\n          <li>\n            <label>主持人</label>\n            <span>{data.host}</span>\n          </li>\n        </ul>\n      }\n      renderButtons={\n        <>\n          {onCancel && (\n            <button className=\"Card__button cancel\" onClick={() => onCancel()}>\n              <span className=\" border-left\">取消预订</span>\n            </button>\n          )}\n\n          {onConfirm && (\n            <button className=\"Card__button confirm\" onClick={() => onConfirm()}>\n              <span>查看详情</span>\n            </button>\n          )}\n        </>\n      }\n    />\n  );\n};\n\nexport default ConferenceHasNotStartCard;\n","import classnames from 'classnames';\nimport React from 'react';\nimport styld from 'styled-components';\nimport { MemberItem } from '../service/mine.model';\nimport { getRoleName } from '../utils/commonFunctions';\nimport './Staff.scss';\n\ntype StaffProps = {\n  info?: MemberItem;\n};\n\nconst Staff: React.FC<StaffProps> = ({ info }) => {\n  if (!info) {\n    return null;\n  }\n  if (!info.role) {\n    return (\n      <div className=\"Staff inline\">\n        <div className=\"avatar\"></div>\n      </div>\n    );\n  }\n  const roleName = getRoleName(info.role);\n\n  return (\n    <div className=\"Staff\">\n      <div className=\"avatar\"></div>\n      <div className=\"info\">\n        <div className=\"top\">\n          <span className=\"name\">{info.name}</span>\n          <span className={classnames('role', info.role)}>{roleName}</span>\n        </div>\n        <div className=\"dept\">{info.dept}</div>\n      </div>\n    </div>\n  );\n};\n\nconst StaffList = styld.div`\ndisplay: flex;\n    flex-wrap: wrap;\n\n    &.nowrap {\n      // flex-wrap: nowrap;\n\n      .Staff {\n        display: flex;\n        align-items: flex-end;\n      }\n    }\n\n    .Staff:not(.inline) {\n      width: 100%;\n    }\n`;\n\nexport { StaffList, Staff };\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Staff, StaffList } from '../../../components/Staff';\nimport { Role } from '../../../service/enum';\nimport Card from './Card';\nimport { ICardProps } from './type';\n\nconst ConferenceProcessingCard: React.FC<ICardProps> = ({ data, typeName, onConfirm }) => {\n  const membersWrapRef = useRef(null);\n  const [membetItemSize, setMemberItemSize] = useState(0);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (membersWrapRef.current) {\n        const MEMBER_ITEM_WIDTH = 42 + 12;\n        const membersWrapWidth = (membersWrapRef as any).current.offsetWidth;\n        const size = Math.floor(membersWrapWidth / MEMBER_ITEM_WIDTH);\n        // console.log(membersWrapWidth, MEMBER_ITEM_WIDTH, size);\n        setMemberItemSize(size + 2);\n      }\n    };\n\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [setMemberItemSize]);\n\n  return (\n    <Card\n      typeName={typeName}\n      isHost={data.isHost}\n      renderBody={\n        <ul className=\"ul\">\n          <li>\n            <label>地点</label>\n            <span>{data.address}</span>\n          </li>\n          <li>\n            <label>时间</label>\n            <span className=\"emphaise\">{data.datetime}</span>\n          </li>\n          <li>\n            <label>会议内容</label>\n            <span className=\"line-clamp\">{data.content}</span>\n          </li>\n          <li>\n            <label>会议文件</label>\n            <span className=\"emphaise\">附件1</span>\n          </li>\n          <li>\n            <label>会议人员</label>\n            <span ref={membersWrapRef}>\n              <StaffList>\n                <Staff info={data.members.find((item) => item.role === Role.HOST)} />\n                <Staff info={data.members.find((item) => item.role === Role.RECORDED)} />\n              </StaffList>\n\n              <StaffList className=\"nowrap\">\n                {data.members.map((item, i) => {\n                  if (item.role === Role.HOST || item.role === Role.RECORDED) return null;\n                  if (i > membetItemSize) {\n                    // 超过第6个人不显示\n                  } else if (i === membetItemSize) {\n                    // 显示省略号\n                    return (\n                      <div className=\"Staff inline\" key={i}>\n                        <span>...</span>\n                      </div>\n                    );\n                  } else {\n                    return <Staff info={item} key={i} />;\n                  }\n                  return null;\n                })}\n              </StaffList>\n            </span>\n          </li>\n        </ul>\n      }\n      renderButtons={\n        <>\n          {onConfirm && (\n            <button className=\"Card__button confirm\" onClick={() => onConfirm()}>\n              <span>查看会议纪要</span>\n            </button>\n          )}\n        </>\n      }\n    />\n  );\n};\n\nexport default ConferenceProcessingCard;\n","import React from 'react';\nimport Card from './Card';\nimport { ICardProps } from './type';\n\nconst InviteCard: React.FC<ICardProps> = ({ data, onConfirm, onCancel }) => {\n  return (\n    <Card\n      renderHead={<span className=\"_title\">{data.title}</span>}\n      renderBody={\n        <ul className=\"ul\">\n          <li>\n            <label>地点</label>\n            <span>{data.address}</span>\n          </li>\n          <li>\n            <label>时间</label>\n            <span className=\"emphaise\">{data.datetime}</span>\n          </li>\n          <li>\n            <label>主持人</label>\n            <span>{data.host}</span>\n          </li>\n        </ul>\n      }\n      renderButtons={\n        <>\n          {onConfirm && (\n            <button className=\"Card__button confirm\" onClick={() => onConfirm()}>\n              <span>接受邀请</span>\n            </button>\n          )}\n\n          {onCancel && (\n            <button className=\"Card__button cancel\" onClick={() => onCancel()}>\n              <span className=\" border-left\">残忍拒绝</span>\n            </button>\n          )}\n        </>\n      }\n    />\n  );\n};\n\nexport default InviteCard;\n","import React from 'react';\nimport Card from './Card';\nimport { ICardProps } from './type';\n\nconst RecordCard: React.FC<ICardProps> = ({ data, typeName, onConfirm }) => {\n  return (\n    <Card\n      typeName={typeName}\n      isHost={data.isHost}\n      renderHead={<span className=\"_title\">{data.title}</span>}\n      renderBody={\n        <ul className=\"ul\">\n          <li>\n            <label>时间</label>\n            <span className=\"emphaise\">{data.datetime}</span>\n          </li>\n          <li>\n            <label>地点</label>\n            <span>{data.address}</span>\n          </li>\n          <li>\n            <label>主持人</label>\n            <span>{data.host}</span>\n          </li>\n        </ul>\n      }\n      renderButtons={\n        <>\n          {onConfirm && (\n            <button className=\"Card__button confirm\" onClick={() => onConfirm()}>\n              <span>查看详情</span>\n            </button>\n          )}\n        </>\n      }\n    />\n  );\n};\n\nexport default RecordCard;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Staff, StaffList } from '../../../components/Staff';\nimport { Role } from '../../../service/enum';\nimport Card from './Card';\nimport { ICardProps } from './type';\n\nconst RecordProcessingCard: React.FC<ICardProps> = ({ data, typeName, onConfirm }) => {\n  const membersWrapRef = useRef(null);\n  const [membetItemSize, setMemberItemSize] = useState(0);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (membersWrapRef.current) {\n        const MEMBER_ITEM_WIDTH = 42 + 12;\n        const membersWrapWidth = (membersWrapRef as any).current.offsetWidth;\n        const size = Math.floor(membersWrapWidth / MEMBER_ITEM_WIDTH);\n        // console.log(membersWrapWidth, MEMBER_ITEM_WIDTH, size);\n        setMemberItemSize(size + 2);\n      }\n    };\n\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [setMemberItemSize]);\n\n  return (\n    <Card\n      typeName={typeName}\n      isHost={data.isHost}\n      renderBody={\n        <ul className=\"ul\">\n          <li>\n            <label>地点</label>\n            <span>{data.address}</span>\n          </li>\n          <li>\n            <label>时间</label>\n            <span className=\"emphaise\">{data.datetime}</span>\n          </li>\n          <li>\n            <label>会议内容</label>\n            <span className=\"line-clamp\">{data.content}</span>\n          </li>\n          <li>\n            <label>会议文件</label>\n            <span className=\"emphaise\">附件1</span>\n          </li>\n          <li>\n            <label>会议人员</label>\n            <span ref={membersWrapRef}>\n              <StaffList>\n                <Staff info={data.members.find((item) => item.role === Role.HOST)} />\n                <Staff info={data.members.find((item) => item.role === Role.RECORDED)} />\n              </StaffList>\n\n              <StaffList className=\"nowrap\">\n                {data.members.map((item, i) => {\n                  if (item.role === Role.HOST || item.role === Role.RECORDED) return null;\n                  if (i > membetItemSize) {\n                    // 超过第6个人不显示\n                  } else if (i === membetItemSize) {\n                    // 显示省略号\n                    return (\n                      <div className=\"Staff inline\" key={i}>\n                        <span>...</span>\n                      </div>\n                    );\n                  } else {\n                    return <Staff info={item} key={i} />;\n                  }\n                  return null;\n                })}\n              </StaffList>\n            </span>\n          </li>\n        </ul>\n      }\n      renderButtons={\n        <>\n          {onConfirm && (\n            <button className=\"Card__button confirm\" onClick={() => onConfirm()}>\n              <span>查看详情</span>\n            </button>\n          )}\n        </>\n      }\n    />\n  );\n};\n\nexport default RecordProcessingCard;\n","import React from 'react';\nimport Card from './Card';\nimport { ICardProps } from './type';\n\nconst RecordPublishedCard: React.FC<ICardProps> = ({ data, typeName, onConfirm }) => {\n  return (\n    <Card\n      typeName={typeName}\n      isHost={data.isHost}\n      renderHead={<span className=\"_title\">{data.title}</span>}\n      renderBody={\n        <ul className=\"ul\">\n          <li>\n            <label>时间</label>\n            <span className=\"emphaise\">{data.datetime}</span>\n          </li>\n          <li>\n            <label>地点</label>\n            <span>{data.address}</span>\n          </li>\n        </ul>\n      }\n      renderButtons={\n        <>\n          {onConfirm && (\n            <button className=\"Card__button confirm\" onClick={() => onConfirm()}>\n              <span>查看详情</span>\n            </button>\n          )}\n        </>\n      }\n    />\n  );\n};\n\nexport default RecordPublishedCard;\n","export { default as Card } from './Card';\nexport { default as ConferenceFinishedCard } from './ConferenceFinishedCard';\nexport { default as ConferenceHasNotStartCard } from './ConferenceHasNotStartCard';\nexport { default as ConferenceProcessingCard } from './ConferenceProcessingCard';\nexport { default as InviteCard } from './InviteCard';\nexport { default as RecordHasNotPublishCard } from './RecordHasNotPublishCard';\nexport { default as RecordProcessingCard } from './RecordProcessingCard';\nexport { default as RecordPublishedCard } from './RecordPublishedCard';\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport useSWR from 'swr';\nimport AppCard from '../../components/AppCard';\nimport { Empty, ErrorMessage, Loading } from '../../components/Common';\nimport fetcher from '../../service/base-service';\nimport { RecordType } from '../../service/enum';\nimport { MineCardParams, RecordParams } from '../../service/mine.model';\nimport { RecordPublishedCard } from './Card/index';\n\nconst Invite: React.FC = () => {\n  const history = useHistory();\n  const [publishedList, setPublishedList] = useState<RecordParams[]>([]);\n  const { data, error } = useSWR('/api/record-list', fetcher.get);\n  // console.log(data)\n\n  useEffect(() => {\n    if (data && data.data) {\n      const list = data.data as MineCardParams[];\n      setPublishedList(list.filter((item) => item.type === RecordType.PUBLISHED));\n    }\n  }, [data]);\n\n  if (error) return <ErrorMessage />;\n  if (!data) return <Loading />;\n\n  if (!data)\n    return (\n      <AppCard>\n        <Empty />\n      </AppCard>\n    );\n\n  function handConfirm() {\n    console.log('confirm');\n    history.push('/record-detail');\n  }\n\n  function handleCancel() {\n    console.log('cancel');\n  }\n\n  return (\n    <>\n      {publishedList.map((item: MineCardParams, i: number) => {\n        const typeName = item.isHost ? '主持' : '参与';\n        return <RecordPublishedCard data={item} key={i} typeName={typeName} onConfirm={handConfirm} onCancel={handleCancel} />;\n      })}\n    </>\n  );\n};\n\nexport default Invite;\n"],"sourceRoot":""}